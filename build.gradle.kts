// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.application) apply false
}

tasks.register("autoBuild") {
    group = "build"
    description = "Checks dependencies and builds the app automatically."

    doLast {
        println("üîç Checking dependencies...")

        // Verificar variables de entorno necesarias
        val sdkDir = System.getenv("ANDROID_SDK_ROOT")
        val ndkDir = System.getenv("ANDROID_NDK_HOME")
        val javaHome = System.getenv("JAVA_HOME")

        if (sdkDir.isNullOrEmpty()) {
            println("‚ö†Ô∏è ANDROID_SDK_ROOT no est√° configurado. Intentando usar ANDROID_HOME...")
            val androidHome = System.getenv("ANDROID_HOME")
            if (androidHome.isNullOrEmpty()) {
                throw GradleException("‚ùå Ni ANDROID_SDK_ROOT ni ANDROID_HOME est√°n configurados!")
            } else {
                println("‚úÖ Usando ANDROID_HOME: $androidHome")
            }
        } else {
            println("‚úÖ SDK Path: $sdkDir")
        }

        if (ndkDir.isNullOrEmpty()) {
            println("‚ö†Ô∏è ANDROID_NDK_HOME no est√° configurado. La compilaci√≥n nativa puede fallar.")
        } else {
            println("‚úÖ NDK Path: $ndkDir")
        }

        if (javaHome.isNullOrEmpty()) {
            println("‚ö†Ô∏è JAVA_HOME no est√° configurado. Usando Java del sistema.")
        } else {
            println("‚úÖ JAVA_HOME: $javaHome")
        }

        println("üöÄ Iniciando compilaci√≥n...")
        try {
            // Ejecutar tareas de compilaci√≥n en secuencia
            project.exec {
                commandLine("./gradlew", "clean")
            }
            println("‚úÖ Limpieza completada")

            project.exec {
                commandLine("./gradlew", "assembleDebug")
            }
            println("‚úÖ Compilaci√≥n Debug completada")

            // Ejecutar pruebas unitarias
            project.exec {
                commandLine("./gradlew", "test")
                isIgnoreExitValue = true  // Continuar incluso si las pruebas fallan
            }
            println("‚úÖ Pruebas unitarias ejecutadas")

            println("üéâ Proceso de compilaci√≥n completado con √©xito!")
        } catch (e: Exception) {
            println("‚ùå Error durante la compilaci√≥n: ${e.message}")
            throw GradleException("La compilaci√≥n fall√≥: ${e.message}")
        }
    }
}